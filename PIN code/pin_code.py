from .keypad import Keypad
import time

# --- MAPPING  ---
ROWS = 4
COLS = 4
KEYS = [
    '1','2','3','A',
    '4','5','6','B',
    '7','8','9','C',
    '*','0','#','D'
]
rowsPins = [18, 23, 24, 25]
colsPins = [10, 22, 27, 17]   # zmƒõ≈à 10 -> 5 pokud m√°≈° aktivn√≠ SPI

# --- NASTAVEN√ç ‚ÄúBANKOMATU‚Äù ---
PIN_KOD = "1234"            # demo PIN (zmƒõ≈à si)
MAX_POKUSU = 3
LOCKOUT_S = 10              # po 3 ≈°patn√Ωch pokusech pauza
PIN_MAX_LEN = 6             # povolen√° d√©lka PINu

# --- POMOCN√â FUNKCE ---
def wait_key(kp, timeout=None):
    """Blokuj√≠c√≠ naƒçten√≠ 1 kl√°vesy s voliteln√Ωm timeoutem (v sekund√°ch)."""
    start = time.time()
    while True:
        k = kp.getKey()
        if k != kp.NULL:
            return k
        if timeout is not None and (time.time() - start) > timeout:
            return None
        time.sleep(0.01)

def read_pin(kp, prompt="Zadej PIN:", max_len=PIN_MAX_LEN, timeout=20):
    """ƒåten√≠ PINu s maskov√°n√≠m: ƒç√≠slice; A=Enter, B=Backspace, *=Clear, C=Cancel."""
    buffer = []
    print(prompt, end=" ", flush=True)
    print("")  # nov√Ω ≈ô√°dek
    while True:
        key = wait_key(kp, timeout=timeout)
        if key is None:
            print("\n‚è±Ô∏è Timeout.")
            return None
        if key in "0123456789":
            if len(buffer) < max_len:
                buffer.append(key)
                print("\r" + "PIN: " + "*" * len(buffer) + " " * (max_len - len(buffer)), end="", flush=True)
        elif key == 'B':  # backspace
            if buffer:
                buffer.pop()
                print("\r" + "PIN: " + "*" * len(buffer) + " " * (max_len - len(buffer)), end="", flush=True)
        elif key == '*':  # clear
            buffer = []
            print("\r" + "PIN: " + "*" * 0 + " " * max_len, end="", flush=True)
        elif key == 'C':  # cancel
            print("\n‚ùå Zru≈°eno.")
            return None
        elif key == 'A':  # enter
            pin = "".join(buffer)
            print("\n")  # od≈ô√°dkov√°n√≠
            return pin
        # ostatn√≠ kl√°vesy ignoruj

def show_menu():
    print("\n=== MENU ===")
    print("1) Z≈Østatek")
    print("2) Vybrat 100 Kƒç")
    print("3) Vlo≈æit 100 Kƒç")
    print("D) Odhl√°sit")
    print("C) Zpƒõt/Zru≈°it")
    print("Zvol mo≈ænost‚Ä¶")

def read_menu_choice(kp, timeout=30):
    while True:
        key = wait_key(kp, timeout=timeout)
        if key is None:
            print("‚è±Ô∏è Timeout v menu.")
            return None
        if key in ('1','2','3','D','C'):
            return key
        # ignoruj ostatn√≠

def main():
    print("Program startuje‚Ä¶")
    keypad = Keypad.Keypad(KEYS, rowsPins, colsPins, ROWS, COLS)
    keypad.setDebounceTime(50)  # ms

    # Demo √∫ƒçet
    balance = 1000
    pokusy = 0

    while True:
        pin = read_pin(keypad, "Zadej PIN:")
        if pin is None:
            # cancel/timeout => zpƒõt na zaƒç√°tek
            continue
        if pin == PIN_KOD:
            print("‚úÖ PIN OK. V√≠tej!")
            pokusy = 0
            # MENU LOOP
            while True:
                show_menu()
                choice = read_menu_choice(keypad)
                if choice is None:
                    print("N√°vrat na p≈ôihl√°≈°en√≠‚Ä¶")
                    break
                if choice == '1':
                    print(f"üí∞ Z≈Østatek: {balance} Kƒç")
                elif choice == '2':
                    if balance >= 100:
                        balance -= 100
                        print("üí∏ Vybr√°no 100 Kƒç.")
                    else:
                        print("‚ö†Ô∏è Nedostateƒçn√Ω z≈Østatek.")
                elif choice == '3':
                    balance += 100
                    print("üíµ Vlo≈æeno 100 Kƒç.")
                elif choice == 'C':
                    print("‚Ü©Ô∏è Zpƒõt.")
                    # jen p≈ôekresli menu
                elif choice == 'D':
                    print("üëã Odhl√°≈°en√≠.")
                    break
                time.sleep(0.5)
        else:
            pokusy += 1
            zbyva = MAX_POKUSU - pokusy
            if zbyva > 0:
                print(f"‚ùå ≈†patn√Ω PIN. Zb√Ωv√° pokus≈Ø: {zbyva}.")
            if pokusy >= MAX_POKUSU:
                print


